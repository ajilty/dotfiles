#!/bin/bash
# dotfile debug
if [ -n "$DOTFILE_DEBUG" ]; then
    echo "Loading ~/.functions"
fi


function git() {
    # override default clone behavior
    # clone git repositories into a directory path that matches source URL

    if [[ "$1" == "clone" ]]; then
        # if empty clone source, run default
        if [[ $2 == https://* ]] || [[ $2 == git://* ]] || [[ $2 == ssh://* ]] || [[ $2 == git@* ]] ; then
            git_src=$2;
            front_trimmed_protocl=${git_src/#*\/\/};
            front_trimed_ssh_user=${front_trimmed_protocl/#*@};
            end_trimmed=${front_trimed_ssh_user%.*};
            replace_colon=${end_trimmed/:/\/};
            git_clone_destination=~/gits/$replace_colon;
            
            echo "Where should git clone to? [$git_clone_destination]?"
            read -r response
            if [[ -z $response ]]; then
                response=$git_clone_destination
            else
                git_clone_destination=$response
            fi

            echo $git_clone_destination;
            command git clone $2 $git_clone_destination;
        else
            # handle unknown repo source types directly
            command git "$@";
        fi

        # change to new directory
        cd $git_clone_destination;
    else
        # handle other sub commands directly 
        command git "$@";
    fi
}

function config-update-omz(){
    # update oh-my-zsh and plugins
    cd ~
    config submodule update --force --recursive --init --remote
    config add -f $(config submodule status | awk '{print $2}')
    config status
    echo 'Oh My Zsh and plug-in updates staged for commit'
    echo 'Push? [y/N]'
    read -r response

    if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
        config commit -m "Update Oh My Zsh and plug-ins"
        config push
    fi

}

# HashiCorp Vault CLI
function vault-okta-login() {
    # check if VAULT_ADDR and OKTA_USERNAME are set
    if [[ -z $VAULT_ADDR ]]; then
        echo "VAULT_ADDR is not set"
        return 1
    fi
    if [[ -z $OKTA_USERNAME ]]; then
        echo "OKTA_USERNAME is not set"
        return 1
    fi
    VAULT_TOKEN=$(vault login -token-only --address ${VAULT_ADDR} -method okta username=${OKTA_USERNAME})
    export VAULT_TOKEN
}

function curl-time() {
    curl -so /dev/null -w "\
   namelookup:  %{time_namelookup}s\n\
      connect:  %{time_connect}s\n\
   appconnect:  %{time_appconnect}s\n\
  pretransfer:  %{time_pretransfer}s\n\
     redirect:  %{time_redirect}s\n\
starttransfer:  %{time_starttransfer}s\n\
-------------------------\n\
        total:  %{time_total}s\n" "$@"
}


function pip() {
    if command -v brew >/dev/null 2>&1; then
        if [[ "$1" == "install" && -z "$VIRTUAL_ENV" && -z "$CONDA_PREFIX" ]]; then
            local pkgname="${2}"
            local brewpkg=$(brew search "$pkgname" | grep -w "$pkgname")

            if [ -n "$brewpkg" ]; then
                echo "Package '$pkgname' is available in Homebrew."
            else
                echo "Package '$pkgname' is not found in Homebrew."
            fi

            echo "Choose the installation method:"
            echo "  [p] Install with pip"
            echo "  [b] Install with Homebrew (if available)"
            echo "  Any other key to cancel"
            read -n 1 -r user_choice
            echo

            case $user_choice in
                [Pp])
                    command pip "$@"
                    ;;
                [Bb])
                    if [ -n "$brewpkg" ]; then
                        brew install "$pkgname"
                    else
                        echo "Package '$pkgname' is not available in Homebrew. Cannot proceed with Homebrew installation."
                    fi
                    ;;
                *)
                    echo "Installation cancelled."
                    return 1
                    ;;
            esac
        else
            command pip "$@"
        fi
    else
        command pip "$@"
    fi
}

# Quick git update: add changed tracked files to a new branch (ask for name), commit (message is same as branch name), and push

function git-quick-branch() {
    # Determine current and default branches
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    default_branch=$(git remote show origin | grep "HEAD branch" | cut -d ":" -f 2 | sed -e 's/^[[:space:]]*//')

    if [ "$current_branch" = "$default_branch" ]; then
        # Logic for when on the default branch
        echo "\nSwitching to default branch and pulling latest changes"
        git pull || return

        echo "\nCreating new branch. Enter branch name:"
        read -r new_branch
        new_branch=${new_branch:-$current_branch}

        # Remove spaces in branch name, replace with dashes and lowercase
        new_branch=$(echo $new_branch | tr '[:upper:]' '[:lower:]' | tr ' ' '-')

        echo "\nCreating new branch: $new_branch"
        git checkout -b $new_branch || return
    else
        # Logic for when on an existing branch
        echo "\nYou are on branch '$current_branch'."
        echo "Would you like to rebase or merge the default branch ('$default_branch') into it? (r/m/n)"
        read -r action
        case $action in
            r)
                git rebase origin/$default_branch || return
                ;;
            m)
                git merge origin/$default_branch || return
                ;;
            *)
                echo "Skipping rebase/merge."
                ;;
        esac
    fi

    # Add changes that are already staged or tracked
    echo "\nAdding changes that are already staged or tracked"
    git add -u

    # Show updates and new files that are already staged
    echo "\nCurrent status of tracked and staged files:"
    git status --untracked-files=no --short

    # Commit changes
    echo "\nEnter commit message:"
    read -r commit_message
    commit_message=${commit_message:-"Update on $current_branch"}

    git commit --quiet -m "$commit_message" || return

    # Push changes
    echo "\nReady to push to origin. Continue? (y/n)"
    read -r confirm
    if [ "$confirm" = "y" ]; then
        git push --quiet --set-upstream origin $current_branch || return
    else
        echo "Push cancelled."
        return
    fi

    # Ask to create a PR
    echo "\nWould you like to create a pull request? (y/n)"
    read -r create_pr
    if [ "$create_pr" = "y" ]; then
        git-quick-pr
    fi
}


function git-quick-pr() {
    # Get current branch name and default branch
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    default_branch=$(git remote show origin | grep "HEAD branch" | cut -d ":" -f 2 | sed -e 's/^[[:space:]]*//')

    # Replace dashes with spaces for the default PR title
    pr_title_default=$(echo "$current_branch" | tr '-' ' ')

    # Ask for PR title and body
    echo "\nEnter PR title (default: '$pr_title_default'):"
    read -r pr_title
    pr_title=${pr_title:-$pr_title_default}

    echo "\nEnter PR body (optional):"
    read -r pr_body
    pr_body=${pr_body:-"Automated PR"}

    # Determine the service (GitHub or GitLab) and execute respective CLI commands
    origin_url=$(git remote get-url origin)
    if [[ "$origin_url" =~ github.com ]]; then
        # Check if GitHub CLI is installed and create PR
        if command -v gh &> /dev/null; then
            echo "\nCreating GitHub PR"
            gh pr create --title "$pr_title" --body "$pr_body" --base $default_branch --head $current_branch

            echo "\nWaiting before checking PR status..."
            for i in {10..1}; do echo -ne "$i... \r"; sleep 1; done; echo -ne "Completed! \n"

            echo "Starting PR checks."
            gh pr checks --watch --fail-fast
            gh pr view --web
        else
            echo "\nGitHub CLI (gh) is not installed. Exiting."
            return 1
        fi
    elif [[ "$origin_url" =~ gitlab.com ]]; then
        echo "\nGitLab functionality is not implemented yet."
        return 1
    else
        echo "\nRemote origin is not supported. Exiting."
        return 1
    fi
}
