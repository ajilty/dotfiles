#!/bin/bash
# dotfile debug
if [ -n "$DOTFILE_DEBUG" ]; then
    echo "Loading ~/.functions"
fi


function git() {
    # override default clone behavior
    # clone git repositories into a directory path that matches source URL

    if [[ "$1" == "clone" ]]; then
        # if empty clone source, run default
        if [[ $2 == https://* ]] || [[ $2 == git://* ]] || [[ $2 == ssh://* ]] || [[ $2 == git@* ]] ; then
            git_src=$2;
            front_trimmed_protocl=${git_src/#*\/\/};
            front_trimed_ssh_user=${front_trimmed_protocl/#*@};
            end_trimmed=${front_trimed_ssh_user%.*};
            replace_colon=${end_trimmed/:/\/};
            git_clone_destination=~/gits/$replace_colon;
            
            echo "Where should git clone to? [$git_clone_destination]?"
            read -r response
            if [[ -z $response ]]; then
                response=$git_clone_destination
            else
                git_clone_destination=$response
            fi

            echo $git_clone_destination;
            command git clone $2 $git_clone_destination;
        else
            # handle unknown repo source types directly
            command git "$@";
        fi

        # change to new directory
        cd $git_clone_destination;
    else
        # handle other sub commands directly 
        command git "$@";
    fi
}

function config-update-omz(){
    # update oh-my-zsh and plugins
    cd ~
    config submodule update --force --recursive --init --remote
    config add -f $(config submodule status | awk '{print $2}')
    config status
    echo 'Oh My Zsh and plug-in updates staged for commit'
    echo 'Push? [y/N]'
    read -r response

    if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
        config commit -m "Update Oh My Zsh and plug-ins"
        config push
    fi

}

# HashiCorp Vault CLI
function vault-login() {
    # check if VAULT_ADDR and OKTA_USERNAME are set
    if [[ -z $VAULT_ADDR ]]; then
        echo "VAULT_ADDR is not set"
        return 1
    fi
    if [[ -z $OKTA_USERNAME ]]; then
        echo "OKTA_USERNAME is not set"
        return 1
    fi
    VAULT_TOKEN=$(vault login -token-only --address ${VAULT_ADDR} -method okta username=${OKTA_USERNAME})
    export VAULT_TOKEN
}

function curl-time() {
    curl -so /dev/null -w "\
   namelookup:  %{time_namelookup}s\n\
      connect:  %{time_connect}s\n\
   appconnect:  %{time_appconnect}s\n\
  pretransfer:  %{time_pretransfer}s\n\
     redirect:  %{time_redirect}s\n\
starttransfer:  %{time_starttransfer}s\n\
-------------------------\n\
        total:  %{time_total}s\n" "$@"
}
